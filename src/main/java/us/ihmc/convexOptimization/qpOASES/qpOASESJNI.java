/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package us.ihmc.convexOptimization.qpOASES;

public class qpOASESJNI {
  public final static native int PL_DEBUG_ITER_get();
  public final static native int ST_LOWER_get();
  public final static native void TabularOutput_idxAddB_set(long jarg1, TabularOutput jarg1_, int jarg2);
  public final static native int TabularOutput_idxAddB_get(long jarg1, TabularOutput jarg1_);
  public final static native void TabularOutput_idxRemB_set(long jarg1, TabularOutput jarg1_, int jarg2);
  public final static native int TabularOutput_idxRemB_get(long jarg1, TabularOutput jarg1_);
  public final static native void TabularOutput_idxAddC_set(long jarg1, TabularOutput jarg1_, int jarg2);
  public final static native int TabularOutput_idxAddC_get(long jarg1, TabularOutput jarg1_);
  public final static native void TabularOutput_idxRemC_set(long jarg1, TabularOutput jarg1_, int jarg2);
  public final static native int TabularOutput_idxRemC_get(long jarg1, TabularOutput jarg1_);
  public final static native void TabularOutput_excAddB_set(long jarg1, TabularOutput jarg1_, int jarg2);
  public final static native int TabularOutput_excAddB_get(long jarg1, TabularOutput jarg1_);
  public final static native void TabularOutput_excRemB_set(long jarg1, TabularOutput jarg1_, int jarg2);
  public final static native int TabularOutput_excRemB_get(long jarg1, TabularOutput jarg1_);
  public final static native void TabularOutput_excAddC_set(long jarg1, TabularOutput jarg1_, int jarg2);
  public final static native int TabularOutput_excAddC_get(long jarg1, TabularOutput jarg1_);
  public final static native void TabularOutput_excRemC_set(long jarg1, TabularOutput jarg1_, int jarg2);
  public final static native int TabularOutput_excRemC_get(long jarg1, TabularOutput jarg1_);
  public final static native long new_TabularOutput();
  public final static native void delete_TabularOutput(long jarg1);
  public final static native void MatMatrixHeader_numericFormat_set(long jarg1, MatMatrixHeader jarg1_, int jarg2);
  public final static native int MatMatrixHeader_numericFormat_get(long jarg1, MatMatrixHeader jarg1_);
  public final static native void MatMatrixHeader_nRows_set(long jarg1, MatMatrixHeader jarg1_, int jarg2);
  public final static native int MatMatrixHeader_nRows_get(long jarg1, MatMatrixHeader jarg1_);
  public final static native void MatMatrixHeader_nCols_set(long jarg1, MatMatrixHeader jarg1_, int jarg2);
  public final static native int MatMatrixHeader_nCols_get(long jarg1, MatMatrixHeader jarg1_);
  public final static native void MatMatrixHeader_imaginaryPart_set(long jarg1, MatMatrixHeader jarg1_, int jarg2);
  public final static native int MatMatrixHeader_imaginaryPart_get(long jarg1, MatMatrixHeader jarg1_);
  public final static native void MatMatrixHeader_nCharName_set(long jarg1, MatMatrixHeader jarg1_, int jarg2);
  public final static native int MatMatrixHeader_nCharName_get(long jarg1, MatMatrixHeader jarg1_);
  public final static native long new_MatMatrixHeader();
  public final static native void delete_MatMatrixHeader(long jarg1);
  public final static native void stdFile_set(long jarg1);
  public final static native long stdFile_get();
  public final static native int TERMINAL_LIST_ELEMENT_get();
  public final static native int SUCCESSFUL_RETURN_get();
  public final static native long new_MessageHandling__SWIG_0();
  public final static native long new_MessageHandling__SWIG_1(long jarg1);
  public final static native long new_MessageHandling__SWIG_2(int jarg1, int jarg2, int jarg3);
  public final static native long new_MessageHandling__SWIG_3(long jarg1, int jarg2, int jarg3, int jarg4);
  public final static native long new_MessageHandling__SWIG_4(long jarg1, MessageHandling jarg1_);
  public final static native void delete_MessageHandling(long jarg1);
  public final static native int MessageHandling_throwError(long jarg1, MessageHandling jarg1_, int jarg2, String jarg3, String jarg4, String jarg5, long jarg6, int jarg7);
  public final static native int MessageHandling_throwWarning(long jarg1, MessageHandling jarg1_, int jarg2, String jarg3, String jarg4, String jarg5, long jarg6, int jarg7);
  public final static native int MessageHandling_throwInfo(long jarg1, MessageHandling jarg1_, int jarg2, String jarg3, String jarg4, String jarg5, long jarg6, int jarg7);
  public final static native int MessageHandling_reset(long jarg1, MessageHandling jarg1_);
  public final static native int MessageHandling_listAllMessages(long jarg1, MessageHandling jarg1_);
  public final static native int MessageHandling_getErrorVisibilityStatus(long jarg1, MessageHandling jarg1_);
  public final static native int MessageHandling_getWarningVisibilityStatus(long jarg1, MessageHandling jarg1_);
  public final static native int MessageHandling_getInfoVisibilityStatus(long jarg1, MessageHandling jarg1_);
  public final static native long MessageHandling_getOutputFile(long jarg1, MessageHandling jarg1_);
  public final static native int MessageHandling_getErrorCount(long jarg1, MessageHandling jarg1_);
  public final static native void MessageHandling_setErrorVisibilityStatus(long jarg1, MessageHandling jarg1_, int jarg2);
  public final static native void MessageHandling_setWarningVisibilityStatus(long jarg1, MessageHandling jarg1_, int jarg2);
  public final static native void MessageHandling_setInfoVisibilityStatus(long jarg1, MessageHandling jarg1_, int jarg2);
  public final static native void MessageHandling_setOutputFile(long jarg1, MessageHandling jarg1_, long jarg2);
  public final static native int MessageHandling_setErrorCount(long jarg1, MessageHandling jarg1_, int jarg2);
  public final static native String MessageHandling_getErrorCodeMessage(int jarg1);
  public final static native int __FUNCTION___get();
  public final static native int __FILE___get();
  public final static native int __LINE___get();
  public final static native long getGlobalMessageHandler();
  public final static native long new_Indexlist__SWIG_0();
  public final static native long new_Indexlist__SWIG_1(int jarg1);
  public final static native long new_Indexlist__SWIG_2(long jarg1, Indexlist jarg1_);
  public final static native void delete_Indexlist(long jarg1);
  public final static native int Indexlist_init__SWIG_0(long jarg1, Indexlist jarg1_, int jarg2);
  public final static native int Indexlist_init__SWIG_1(long jarg1, Indexlist jarg1_);
  public final static native int Indexlist_getNumberArray(long jarg1, Indexlist jarg1_, long jarg2);
  public final static native int Indexlist_getISortArray(long jarg1, Indexlist jarg1_, long jarg2);
  public final static native int Indexlist_getIndex(long jarg1, Indexlist jarg1_, int jarg2);
  public final static native int Indexlist_getNumber(long jarg1, Indexlist jarg1_, int jarg2);
  public final static native int Indexlist_getLength(long jarg1, Indexlist jarg1_);
  public final static native int Indexlist_getLastNumber(long jarg1, Indexlist jarg1_);
  public final static native int Indexlist_addNumber(long jarg1, Indexlist jarg1_, int jarg2);
  public final static native int Indexlist_removeNumber(long jarg1, Indexlist jarg1_, int jarg2);
  public final static native int Indexlist_swapNumbers(long jarg1, Indexlist jarg1_, int jarg2, int jarg3);
  public final static native int Indexlist_isMember(long jarg1, Indexlist jarg1_, int jarg2);
  public final static native void delete_Matrix(long jarg1);
  public final static native void Matrix_free(long jarg1, Matrix jarg1_);
  public final static native long Matrix_duplicate(long jarg1, Matrix jarg1_);
  public final static native double Matrix_diag(long jarg1, Matrix jarg1_, int jarg2);
  public final static native int Matrix_isDiag(long jarg1, Matrix jarg1_);
  public final static native double Matrix_getNorm__SWIG_0(long jarg1, Matrix jarg1_, int jarg2);
  public final static native double Matrix_getNorm__SWIG_1(long jarg1, Matrix jarg1_);
  public final static native double Matrix_getRowNorm__SWIG_0(long jarg1, Matrix jarg1_, int jarg2, int jarg3);
  public final static native double Matrix_getRowNorm__SWIG_1(long jarg1, Matrix jarg1_, int jarg2);
  public final static native int Matrix_getRow(long jarg1, Matrix jarg1_, int jarg2, long jarg3, Indexlist jarg3_, double jarg4, double[] jarg5);
  public final static native int Matrix_getCol(long jarg1, Matrix jarg1_, int jarg2, long jarg3, Indexlist jarg3_, double jarg4, double[] jarg5);
  public final static native int Matrix_times__SWIG_0(long jarg1, Matrix jarg1_, int jarg2, double jarg3, double[] jarg4, int jarg5, double jarg6, double[] jarg7, int jarg8);
  public final static native int Matrix_transTimes__SWIG_0(long jarg1, Matrix jarg1_, int jarg2, double jarg3, double[] jarg4, int jarg5, double jarg6, double[] jarg7, int jarg8);
  public final static native int Matrix_times__SWIG_1(long jarg1, Matrix jarg1_, long jarg2, Indexlist jarg2_, long jarg3, Indexlist jarg3_, int jarg4, double jarg5, double[] jarg6, int jarg7, double jarg8, double[] jarg9, int jarg10, int jarg11);
  public final static native int Matrix_times__SWIG_2(long jarg1, Matrix jarg1_, long jarg2, Indexlist jarg2_, long jarg3, Indexlist jarg3_, int jarg4, double jarg5, double[] jarg6, int jarg7, double jarg8, double[] jarg9, int jarg10);
  public final static native int Matrix_transTimes__SWIG_1(long jarg1, Matrix jarg1_, long jarg2, Indexlist jarg2_, long jarg3, Indexlist jarg3_, int jarg4, double jarg5, double[] jarg6, int jarg7, double jarg8, double[] jarg9, int jarg10);
  public final static native int Matrix_addToDiag(long jarg1, Matrix jarg1_, double jarg2);
  public final static native int Matrix_print__SWIG_0(long jarg1, Matrix jarg1_, String jarg2);
  public final static native int Matrix_print__SWIG_1(long jarg1, Matrix jarg1_);
  public final static native int Matrix_needToFreeMemory(long jarg1, Matrix jarg1_);
  public final static native void Matrix_doFreeMemory(long jarg1, Matrix jarg1_);
  public final static native void Matrix_doNotFreeMemory(long jarg1, Matrix jarg1_);
  public final static native long SymmetricMatrix_duplicateSym(long jarg1, SymmetricMatrix jarg1_);
  public final static native int SymmetricMatrix_bilinear(long jarg1, SymmetricMatrix jarg1_, long jarg2, Indexlist jarg2_, int jarg3, double[] jarg4, int jarg5, double[] jarg6, int jarg7);
  public final static native void delete_SymmetricMatrix(long jarg1);
  public final static native long new_DenseMatrix__SWIG_0();
  public final static native long new_DenseMatrix__SWIG_1(int jarg1, int jarg2, int jarg3, double[] jarg4);
  public final static native void delete_DenseMatrix(long jarg1);
  public final static native void DenseMatrix_free(long jarg1, DenseMatrix jarg1_);
  public final static native long DenseMatrix_duplicate(long jarg1, DenseMatrix jarg1_);
  public final static native double DenseMatrix_diag(long jarg1, DenseMatrix jarg1_, int jarg2);
  public final static native int DenseMatrix_isDiag(long jarg1, DenseMatrix jarg1_);
  public final static native double DenseMatrix_getNorm__SWIG_0(long jarg1, DenseMatrix jarg1_, int jarg2);
  public final static native double DenseMatrix_getNorm__SWIG_1(long jarg1, DenseMatrix jarg1_);
  public final static native double DenseMatrix_getRowNorm__SWIG_0(long jarg1, DenseMatrix jarg1_, int jarg2, int jarg3);
  public final static native double DenseMatrix_getRowNorm__SWIG_1(long jarg1, DenseMatrix jarg1_, int jarg2);
  public final static native int DenseMatrix_getRow(long jarg1, DenseMatrix jarg1_, int jarg2, long jarg3, Indexlist jarg3_, double jarg4, double[] jarg5);
  public final static native int DenseMatrix_getCol(long jarg1, DenseMatrix jarg1_, int jarg2, long jarg3, Indexlist jarg3_, double jarg4, double[] jarg5);
  public final static native int DenseMatrix_times__SWIG_0(long jarg1, DenseMatrix jarg1_, int jarg2, double jarg3, double[] jarg4, int jarg5, double jarg6, double[] jarg7, int jarg8);
  public final static native int DenseMatrix_transTimes__SWIG_0(long jarg1, DenseMatrix jarg1_, int jarg2, double jarg3, double[] jarg4, int jarg5, double jarg6, double[] jarg7, int jarg8);
  public final static native int DenseMatrix_times__SWIG_1(long jarg1, DenseMatrix jarg1_, long jarg2, Indexlist jarg2_, long jarg3, Indexlist jarg3_, int jarg4, double jarg5, double[] jarg6, int jarg7, double jarg8, double[] jarg9, int jarg10, int jarg11);
  public final static native int DenseMatrix_times__SWIG_2(long jarg1, DenseMatrix jarg1_, long jarg2, Indexlist jarg2_, long jarg3, Indexlist jarg3_, int jarg4, double jarg5, double[] jarg6, int jarg7, double jarg8, double[] jarg9, int jarg10);
  public final static native int DenseMatrix_transTimes__SWIG_1(long jarg1, DenseMatrix jarg1_, long jarg2, Indexlist jarg2_, long jarg3, Indexlist jarg3_, int jarg4, double jarg5, double[] jarg6, int jarg7, double jarg8, double[] jarg9, int jarg10);
  public final static native int DenseMatrix_addToDiag(long jarg1, DenseMatrix jarg1_, double jarg2);
  public final static native int DenseMatrix_print__SWIG_0(long jarg1, DenseMatrix jarg1_, String jarg2);
  public final static native int DenseMatrix_print__SWIG_1(long jarg1, DenseMatrix jarg1_);
  public final static native long new_SymDenseMat__SWIG_0();
  public final static native long new_SymDenseMat__SWIG_1(int jarg1, int jarg2, int jarg3, double[] jarg4);
  public final static native long SymDenseMat_duplicate(long jarg1, SymDenseMat jarg1_);
  public final static native long SymDenseMat_duplicateSym(long jarg1, SymDenseMat jarg1_);
  public final static native int SymDenseMat_bilinear(long jarg1, SymDenseMat jarg1_, long jarg2, Indexlist jarg2_, int jarg3, double[] jarg4, int jarg5, double[] jarg6, int jarg7);
  public final static native void delete_SymDenseMat(long jarg1);
  public final static native long new_SparseMatrix__SWIG_0();
  public final static native long new_SparseMatrix__SWIG_1(int jarg1, int jarg2, int[] jarg3, int[] jarg4, double[] jarg5);
  public final static native long new_SparseMatrix__SWIG_2(int jarg1, int jarg2, int jarg3, double[] jarg4);
  public final static native void delete_SparseMatrix(long jarg1);
  public final static native void SparseMatrix_free(long jarg1, SparseMatrix jarg1_);
  public final static native long SparseMatrix_duplicate(long jarg1, SparseMatrix jarg1_);
  public final static native double SparseMatrix_diag(long jarg1, SparseMatrix jarg1_, int jarg2);
  public final static native int SparseMatrix_isDiag(long jarg1, SparseMatrix jarg1_);
  public final static native double SparseMatrix_getNorm__SWIG_0(long jarg1, SparseMatrix jarg1_, int jarg2);
  public final static native double SparseMatrix_getNorm__SWIG_1(long jarg1, SparseMatrix jarg1_);
  public final static native double SparseMatrix_getRowNorm__SWIG_0(long jarg1, SparseMatrix jarg1_, int jarg2, int jarg3);
  public final static native double SparseMatrix_getRowNorm__SWIG_1(long jarg1, SparseMatrix jarg1_, int jarg2);
  public final static native int SparseMatrix_getRow(long jarg1, SparseMatrix jarg1_, int jarg2, long jarg3, Indexlist jarg3_, double jarg4, double[] jarg5);
  public final static native int SparseMatrix_getCol(long jarg1, SparseMatrix jarg1_, int jarg2, long jarg3, Indexlist jarg3_, double jarg4, double[] jarg5);
  public final static native int SparseMatrix_times__SWIG_0(long jarg1, SparseMatrix jarg1_, int jarg2, double jarg3, double[] jarg4, int jarg5, double jarg6, double[] jarg7, int jarg8);
  public final static native int SparseMatrix_transTimes__SWIG_0(long jarg1, SparseMatrix jarg1_, int jarg2, double jarg3, double[] jarg4, int jarg5, double jarg6, double[] jarg7, int jarg8);
  public final static native int SparseMatrix_times__SWIG_1(long jarg1, SparseMatrix jarg1_, long jarg2, Indexlist jarg2_, long jarg3, Indexlist jarg3_, int jarg4, double jarg5, double[] jarg6, int jarg7, double jarg8, double[] jarg9, int jarg10, int jarg11);
  public final static native int SparseMatrix_times__SWIG_2(long jarg1, SparseMatrix jarg1_, long jarg2, Indexlist jarg2_, long jarg3, Indexlist jarg3_, int jarg4, double jarg5, double[] jarg6, int jarg7, double jarg8, double[] jarg9, int jarg10);
  public final static native int SparseMatrix_transTimes__SWIG_1(long jarg1, SparseMatrix jarg1_, long jarg2, Indexlist jarg2_, long jarg3, Indexlist jarg3_, int jarg4, double jarg5, double[] jarg6, int jarg7, double jarg8, double[] jarg9, int jarg10);
  public final static native int SparseMatrix_addToDiag(long jarg1, SparseMatrix jarg1_, double jarg2);
  public final static native int SparseMatrix_print__SWIG_0(long jarg1, SparseMatrix jarg1_, String jarg2);
  public final static native int SparseMatrix_print__SWIG_1(long jarg1, SparseMatrix jarg1_);
  public final static native long new_SparseMatrixRow__SWIG_0();
  public final static native long new_SparseMatrixRow__SWIG_1(int jarg1, int jarg2, int[] jarg3, int[] jarg4, double[] jarg5);
  public final static native long new_SparseMatrixRow__SWIG_2(int jarg1, int jarg2, int jarg3, double[] jarg4);
  public final static native void delete_SparseMatrixRow(long jarg1);
  public final static native void SparseMatrixRow_free(long jarg1, SparseMatrixRow jarg1_);
  public final static native long SparseMatrixRow_duplicate(long jarg1, SparseMatrixRow jarg1_);
  public final static native double SparseMatrixRow_diag(long jarg1, SparseMatrixRow jarg1_, int jarg2);
  public final static native int SparseMatrixRow_isDiag(long jarg1, SparseMatrixRow jarg1_);
  public final static native double SparseMatrixRow_getNorm__SWIG_0(long jarg1, SparseMatrixRow jarg1_, int jarg2);
  public final static native double SparseMatrixRow_getNorm__SWIG_1(long jarg1, SparseMatrixRow jarg1_);
  public final static native double SparseMatrixRow_getRowNorm__SWIG_0(long jarg1, SparseMatrixRow jarg1_, int jarg2, int jarg3);
  public final static native double SparseMatrixRow_getRowNorm__SWIG_1(long jarg1, SparseMatrixRow jarg1_, int jarg2);
  public final static native int SparseMatrixRow_getRow(long jarg1, SparseMatrixRow jarg1_, int jarg2, long jarg3, Indexlist jarg3_, double jarg4, double[] jarg5);
  public final static native int SparseMatrixRow_getCol(long jarg1, SparseMatrixRow jarg1_, int jarg2, long jarg3, Indexlist jarg3_, double jarg4, double[] jarg5);
  public final static native int SparseMatrixRow_times__SWIG_0(long jarg1, SparseMatrixRow jarg1_, int jarg2, double jarg3, double[] jarg4, int jarg5, double jarg6, double[] jarg7, int jarg8);
  public final static native int SparseMatrixRow_transTimes__SWIG_0(long jarg1, SparseMatrixRow jarg1_, int jarg2, double jarg3, double[] jarg4, int jarg5, double jarg6, double[] jarg7, int jarg8);
  public final static native int SparseMatrixRow_times__SWIG_1(long jarg1, SparseMatrixRow jarg1_, long jarg2, Indexlist jarg2_, long jarg3, Indexlist jarg3_, int jarg4, double jarg5, double[] jarg6, int jarg7, double jarg8, double[] jarg9, int jarg10, int jarg11);
  public final static native int SparseMatrixRow_times__SWIG_2(long jarg1, SparseMatrixRow jarg1_, long jarg2, Indexlist jarg2_, long jarg3, Indexlist jarg3_, int jarg4, double jarg5, double[] jarg6, int jarg7, double jarg8, double[] jarg9, int jarg10);
  public final static native int SparseMatrixRow_transTimes__SWIG_1(long jarg1, SparseMatrixRow jarg1_, long jarg2, Indexlist jarg2_, long jarg3, Indexlist jarg3_, int jarg4, double jarg5, double[] jarg6, int jarg7, double jarg8, double[] jarg9, int jarg10);
  public final static native int SparseMatrixRow_addToDiag(long jarg1, SparseMatrixRow jarg1_, double jarg2);
  public final static native int SparseMatrixRow_print__SWIG_0(long jarg1, SparseMatrixRow jarg1_, String jarg2);
  public final static native int SparseMatrixRow_print__SWIG_1(long jarg1, SparseMatrixRow jarg1_);
  public final static native long new_SymSparseMat__SWIG_0();
  public final static native long new_SymSparseMat__SWIG_1(int jarg1, int jarg2, int[] jarg3, int[] jarg4, double[] jarg5);
  public final static native long new_SymSparseMat__SWIG_2(int jarg1, int jarg2, int jarg3, double[] jarg4);
  public final static native long SymSparseMat_duplicate(long jarg1, SymSparseMat jarg1_);
  public final static native long SymSparseMat_duplicateSym(long jarg1, SymSparseMat jarg1_);
  public final static native int SymSparseMat_bilinear(long jarg1, SymSparseMat jarg1_, long jarg2, Indexlist jarg2_, int jarg3, double[] jarg4, int jarg5, double[] jarg6, int jarg7);
  public final static native void delete_SymSparseMat(long jarg1);
  public final static native void delete_SubjectTo(long jarg1);
  public final static native int SubjectTo_init__SWIG_0(long jarg1, SubjectTo jarg1_, int jarg2);
  public final static native int SubjectTo_init__SWIG_1(long jarg1, SubjectTo jarg1_);
  public final static native int SubjectTo_getNumberOfType(long jarg1, SubjectTo jarg1_, int jarg2);
  public final static native int SubjectTo_getType(long jarg1, SubjectTo jarg1_, int jarg2);
  public final static native int SubjectTo_getStatus(long jarg1, SubjectTo jarg1_, int jarg2);
  public final static native int SubjectTo_setType(long jarg1, SubjectTo jarg1_, int jarg2, int jarg3);
  public final static native int SubjectTo_setStatus(long jarg1, SubjectTo jarg1_, int jarg2, int jarg3);
  public final static native void SubjectTo_setNoLower(long jarg1, SubjectTo jarg1_, int jarg2);
  public final static native void SubjectTo_setNoUpper(long jarg1, SubjectTo jarg1_, int jarg2);
  public final static native int SubjectTo_hasNoLower(long jarg1, SubjectTo jarg1_);
  public final static native int SubjectTo_hasNoUpper(long jarg1, SubjectTo jarg1_);
  public final static native int SubjectTo_shift(long jarg1, SubjectTo jarg1_, int jarg2);
  public final static native int SubjectTo_rotate(long jarg1, SubjectTo jarg1_, int jarg2);
  public final static native long new_Bounds__SWIG_0();
  public final static native long new_Bounds__SWIG_1(int jarg1);
  public final static native long new_Bounds__SWIG_2(long jarg1, Bounds jarg1_);
  public final static native void delete_Bounds(long jarg1);
  public final static native int Bounds_init__SWIG_0(long jarg1, Bounds jarg1_, int jarg2);
  public final static native int Bounds_init__SWIG_1(long jarg1, Bounds jarg1_);
  public final static native int Bounds_setupBound(long jarg1, Bounds jarg1_, int jarg2, int jarg3);
  public final static native int Bounds_setupAllFree(long jarg1, Bounds jarg1_);
  public final static native int Bounds_setupAllLower(long jarg1, Bounds jarg1_);
  public final static native int Bounds_setupAllUpper(long jarg1, Bounds jarg1_);
  public final static native int Bounds_moveFixedToFree(long jarg1, Bounds jarg1_, int jarg2);
  public final static native int Bounds_moveFreeToFixed(long jarg1, Bounds jarg1_, int jarg2, int jarg3);
  public final static native int Bounds_flipFixed(long jarg1, Bounds jarg1_, int jarg2);
  public final static native int Bounds_swapFree(long jarg1, Bounds jarg1_, int jarg2, int jarg3);
  public final static native int Bounds_getNV(long jarg1, Bounds jarg1_);
  public final static native int Bounds_getNFV(long jarg1, Bounds jarg1_);
  public final static native int Bounds_getNBV(long jarg1, Bounds jarg1_);
  public final static native int Bounds_getNUV(long jarg1, Bounds jarg1_);
  public final static native int Bounds_getNFR(long jarg1, Bounds jarg1_);
  public final static native int Bounds_getNFX(long jarg1, Bounds jarg1_);
  public final static native long Bounds_getFree(long jarg1, Bounds jarg1_);
  public final static native long Bounds_getFixed(long jarg1, Bounds jarg1_);
  public final static native int Bounds_shift(long jarg1, Bounds jarg1_, int jarg2);
  public final static native int Bounds_rotate(long jarg1, Bounds jarg1_, int jarg2);
  public final static native int Bounds_print(long jarg1, Bounds jarg1_);
  public final static native long new_Constraints__SWIG_0();
  public final static native long new_Constraints__SWIG_1(int jarg1);
  public final static native long new_Constraints__SWIG_2(long jarg1, Constraints jarg1_);
  public final static native void delete_Constraints(long jarg1);
  public final static native int Constraints_init__SWIG_0(long jarg1, Constraints jarg1_, int jarg2);
  public final static native int Constraints_init__SWIG_1(long jarg1, Constraints jarg1_);
  public final static native int Constraints_setupConstraint(long jarg1, Constraints jarg1_, int jarg2, int jarg3);
  public final static native int Constraints_setupAllInactive(long jarg1, Constraints jarg1_);
  public final static native int Constraints_setupAllLower(long jarg1, Constraints jarg1_);
  public final static native int Constraints_setupAllUpper(long jarg1, Constraints jarg1_);
  public final static native int Constraints_moveActiveToInactive(long jarg1, Constraints jarg1_, int jarg2);
  public final static native int Constraints_moveInactiveToActive(long jarg1, Constraints jarg1_, int jarg2, int jarg3);
  public final static native int Constraints_flipFixed(long jarg1, Constraints jarg1_, int jarg2);
  public final static native int Constraints_getNC(long jarg1, Constraints jarg1_);
  public final static native int Constraints_getNEC(long jarg1, Constraints jarg1_);
  public final static native int Constraints_getNIC(long jarg1, Constraints jarg1_);
  public final static native int Constraints_getNUC(long jarg1, Constraints jarg1_);
  public final static native int Constraints_getNAC(long jarg1, Constraints jarg1_);
  public final static native int Constraints_getNIAC(long jarg1, Constraints jarg1_);
  public final static native long Constraints_getActive(long jarg1, Constraints jarg1_);
  public final static native long Constraints_getInactive(long jarg1, Constraints jarg1_);
  public final static native int Constraints_shift(long jarg1, Constraints jarg1_, int jarg2);
  public final static native int Constraints_rotate(long jarg1, Constraints jarg1_, int jarg2);
  public final static native int Constraints_print(long jarg1, Constraints jarg1_);
  public final static native void delete_ConstraintProduct(long jarg1);
  public final static native long new_Options__SWIG_0();
  public final static native long new_Options__SWIG_1(long jarg1, Options jarg1_);
  public final static native void delete_Options(long jarg1);
  public final static native int Options_setToDefault(long jarg1, Options jarg1_);
  public final static native int Options_setToReliable(long jarg1, Options jarg1_);
  public final static native int Options_setToMPC(long jarg1, Options jarg1_);
  public final static native int Options_setToFast(long jarg1, Options jarg1_);
  public final static native int Options_ensureConsistency(long jarg1, Options jarg1_);
  public final static native int Options_print(long jarg1, Options jarg1_);
  public final static native void Options_printLevel_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_printLevel_get(long jarg1, Options jarg1_);
  public final static native void Options_enableRamping_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_enableRamping_get(long jarg1, Options jarg1_);
  public final static native void Options_enableFarBounds_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_enableFarBounds_get(long jarg1, Options jarg1_);
  public final static native void Options_enableFlippingBounds_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_enableFlippingBounds_get(long jarg1, Options jarg1_);
  public final static native void Options_enableRegularisation_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_enableRegularisation_get(long jarg1, Options jarg1_);
  public final static native void Options_enableFullLITests_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_enableFullLITests_get(long jarg1, Options jarg1_);
  public final static native void Options_enableNZCTests_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_enableNZCTests_get(long jarg1, Options jarg1_);
  public final static native void Options_enableDriftCorrection_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_enableDriftCorrection_get(long jarg1, Options jarg1_);
  public final static native void Options_enableCholeskyRefactorisation_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_enableCholeskyRefactorisation_get(long jarg1, Options jarg1_);
  public final static native void Options_enableEqualities_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_enableEqualities_get(long jarg1, Options jarg1_);
  public final static native void Options_terminationTolerance_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_terminationTolerance_get(long jarg1, Options jarg1_);
  public final static native void Options_boundTolerance_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_boundTolerance_get(long jarg1, Options jarg1_);
  public final static native void Options_boundRelaxation_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_boundRelaxation_get(long jarg1, Options jarg1_);
  public final static native void Options_epsNum_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_epsNum_get(long jarg1, Options jarg1_);
  public final static native void Options_epsDen_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_epsDen_get(long jarg1, Options jarg1_);
  public final static native void Options_maxPrimalJump_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_maxPrimalJump_get(long jarg1, Options jarg1_);
  public final static native void Options_maxDualJump_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_maxDualJump_get(long jarg1, Options jarg1_);
  public final static native void Options_initialRamping_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_initialRamping_get(long jarg1, Options jarg1_);
  public final static native void Options_finalRamping_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_finalRamping_get(long jarg1, Options jarg1_);
  public final static native void Options_initialFarBounds_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_initialFarBounds_get(long jarg1, Options jarg1_);
  public final static native void Options_growFarBounds_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_growFarBounds_get(long jarg1, Options jarg1_);
  public final static native void Options_initialStatusBounds_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_initialStatusBounds_get(long jarg1, Options jarg1_);
  public final static native void Options_epsFlipping_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_epsFlipping_get(long jarg1, Options jarg1_);
  public final static native void Options_numRegularisationSteps_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_numRegularisationSteps_get(long jarg1, Options jarg1_);
  public final static native void Options_epsRegularisation_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_epsRegularisation_get(long jarg1, Options jarg1_);
  public final static native void Options_numRefinementSteps_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_numRefinementSteps_get(long jarg1, Options jarg1_);
  public final static native void Options_epsIterRef_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_epsIterRef_get(long jarg1, Options jarg1_);
  public final static native void Options_epsLITests_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_epsLITests_get(long jarg1, Options jarg1_);
  public final static native void Options_epsNZCTests_set(long jarg1, Options jarg1_, double jarg2);
  public final static native double Options_epsNZCTests_get(long jarg1, Options jarg1_);
  public final static native void Options_enableDropInfeasibles_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_enableDropInfeasibles_get(long jarg1, Options jarg1_);
  public final static native void Options_dropBoundPriority_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_dropBoundPriority_get(long jarg1, Options jarg1_);
  public final static native void Options_dropEqConPriority_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_dropEqConPriority_get(long jarg1, Options jarg1_);
  public final static native void Options_dropIneqConPriority_set(long jarg1, Options jarg1_, int jarg2);
  public final static native int Options_dropIneqConPriority_get(long jarg1, Options jarg1_);
  public final static native long new_QProblemB__SWIG_0();
  public final static native long new_QProblemB__SWIG_1(int jarg1, int jarg2);
  public final static native long new_QProblemB__SWIG_2(int jarg1);
  public final static native long new_QProblemB__SWIG_3(long jarg1, QProblemB jarg1_);
  public final static native void delete_QProblemB(long jarg1);
  public final static native int QProblemB_reset(long jarg1, QProblemB jarg1_);
  public final static native int QProblemB_init__SWIG_0(long jarg1, QProblemB jarg1_, long jarg2, SymmetricMatrix jarg2_, double[] jarg3, double[] jarg4, double[] jarg5, int[] jarg6, double[] jarg7);
  public final static native int QProblemB_init__SWIG_1(long jarg1, QProblemB jarg1_, long jarg2, SymmetricMatrix jarg2_, double[] jarg3, double[] jarg4, double[] jarg5, int[] jarg6);
  public final static native int QProblemB_init__SWIG_2(long jarg1, QProblemB jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, int[] jarg6, double[] jarg7);
  public final static native int QProblemB_init__SWIG_3(long jarg1, QProblemB jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, int[] jarg6);
  public final static native int QProblemB_init__SWIG_4(long jarg1, QProblemB jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, int[] jarg6, double[] jarg7);
  public final static native int QProblemB_init__SWIG_5(long jarg1, QProblemB jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, int[] jarg6);
  public final static native int QProblemB_init__SWIG_6(long jarg1, QProblemB jarg1_, long jarg2, SymmetricMatrix jarg2_, double[] jarg3, double[] jarg4, double[] jarg5, int[] jarg6, double[] jarg7, double[] jarg8, double[] jarg9, long jarg10, Bounds jarg10_);
  public final static native int QProblemB_init__SWIG_7(long jarg1, QProblemB jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, int[] jarg6, double[] jarg7, double[] jarg8, double[] jarg9, long jarg10, Bounds jarg10_);
  public final static native int QProblemB_init__SWIG_8(long jarg1, QProblemB jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, int[] jarg6, double[] jarg7, double[] jarg8, double[] jarg9, long jarg10, Bounds jarg10_);
  public final static native int QProblemB_hotstart__SWIG_0(long jarg1, QProblemB jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, int[] jarg5, double[] jarg6);
  public final static native int QProblemB_hotstart__SWIG_1(long jarg1, QProblemB jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, int[] jarg5);
  public final static native int QProblemB_hotstart__SWIG_2(long jarg1, QProblemB jarg1_, String jarg2, String jarg3, String jarg4, int[] jarg5, double[] jarg6);
  public final static native int QProblemB_hotstart__SWIG_3(long jarg1, QProblemB jarg1_, String jarg2, String jarg3, String jarg4, int[] jarg5);
  public final static native int QProblemB_hotstart__SWIG_4(long jarg1, QProblemB jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, int[] jarg5, double[] jarg6, long jarg7, Bounds jarg7_);
  public final static native int QProblemB_hotstart__SWIG_5(long jarg1, QProblemB jarg1_, String jarg2, String jarg3, String jarg4, int[] jarg5, double[] jarg6, long jarg7, Bounds jarg7_);
  public final static native int QProblemB_getWorkingSet(long jarg1, QProblemB jarg1_, double[] jarg2);
  public final static native int QProblemB_getBounds(long jarg1, QProblemB jarg1_, long jarg2, Bounds jarg2_);
  public final static native int QProblemB_getNV(long jarg1, QProblemB jarg1_);
  public final static native int QProblemB_getNFR(long jarg1, QProblemB jarg1_);
  public final static native int QProblemB_getNFX(long jarg1, QProblemB jarg1_);
  public final static native int QProblemB_getNFV(long jarg1, QProblemB jarg1_);
  public final static native int QProblemB_getNZ(long jarg1, QProblemB jarg1_);
  public final static native double QProblemB_getObjVal__SWIG_0(long jarg1, QProblemB jarg1_);
  public final static native double QProblemB_getObjVal__SWIG_1(long jarg1, QProblemB jarg1_, double[] jarg2);
  public final static native int QProblemB_getPrimalSolution(long jarg1, QProblemB jarg1_, double[] jarg2);
  public final static native int QProblemB_getDualSolution(long jarg1, QProblemB jarg1_, double[] jarg2);
  public final static native int QProblemB_getStatus(long jarg1, QProblemB jarg1_);
  public final static native int QProblemB_isInitialised(long jarg1, QProblemB jarg1_);
  public final static native int QProblemB_isSolved(long jarg1, QProblemB jarg1_);
  public final static native int QProblemB_isInfeasible(long jarg1, QProblemB jarg1_);
  public final static native int QProblemB_isUnbounded(long jarg1, QProblemB jarg1_);
  public final static native int QProblemB_getHessianType(long jarg1, QProblemB jarg1_);
  public final static native int QProblemB_setHessianType(long jarg1, QProblemB jarg1_, int jarg2);
  public final static native int QProblemB_usingRegularisation(long jarg1, QProblemB jarg1_);
  public final static native long QProblemB_getOptions(long jarg1, QProblemB jarg1_);
  public final static native int QProblemB_setOptions(long jarg1, QProblemB jarg1_, long jarg2, Options jarg2_);
  public final static native int QProblemB_getPrintLevel(long jarg1, QProblemB jarg1_);
  public final static native int QProblemB_setPrintLevel(long jarg1, QProblemB jarg1_, int jarg2);
  public final static native int QProblemB_printProperties(long jarg1, QProblemB jarg1_);
  public final static native int QProblemB_printOptions(long jarg1, QProblemB jarg1_);
  public final static native long new_QProblem__SWIG_0();
  public final static native long new_QProblem__SWIG_1(int jarg1, int jarg2, int jarg3);
  public final static native long new_QProblem__SWIG_2(int jarg1, int jarg2);
  public final static native long new_QProblem__SWIG_3(long jarg1, QProblem jarg1_);
  public final static native void delete_QProblem(long jarg1);
  public final static native int QProblem_reset(long jarg1, QProblem jarg1_);
  public final static native int QProblem_init__SWIG_0(long jarg1, QProblem jarg1_, long jarg2, SymmetricMatrix jarg2_, double[] jarg3, long jarg4, Matrix jarg4_, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, int[] jarg9, double[] jarg10);
  public final static native int QProblem_init__SWIG_1(long jarg1, QProblem jarg1_, long jarg2, SymmetricMatrix jarg2_, double[] jarg3, long jarg4, Matrix jarg4_, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, int[] jarg9);
  public final static native int QProblem_init__SWIG_2(long jarg1, QProblem jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, int[] jarg9, double[] jarg10);
  public final static native int QProblem_init__SWIG_3(long jarg1, QProblem jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, int[] jarg9);
  public final static native int QProblem_init__SWIG_4(long jarg1, QProblem jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, String jarg6, String jarg7, String jarg8, int[] jarg9, double[] jarg10);
  public final static native int QProblem_init__SWIG_5(long jarg1, QProblem jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, String jarg6, String jarg7, String jarg8, int[] jarg9);
  public final static native int QProblem_init__SWIG_6(long jarg1, QProblem jarg1_, long jarg2, SymmetricMatrix jarg2_, double[] jarg3, long jarg4, Matrix jarg4_, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, int[] jarg9, double[] jarg10, double[] jarg11, double[] jarg12, long jarg13, Bounds jarg13_, long jarg14, Constraints jarg14_);
  public final static native int QProblem_init__SWIG_7(long jarg1, QProblem jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, int[] jarg9, double[] jarg10, double[] jarg11, double[] jarg12, long jarg13, Bounds jarg13_, long jarg14, Constraints jarg14_);
  public final static native int QProblem_init__SWIG_8(long jarg1, QProblem jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, String jarg6, String jarg7, String jarg8, int[] jarg9, double[] jarg10, double[] jarg11, double[] jarg12, long jarg13, Bounds jarg13_, long jarg14, Constraints jarg14_);
  public final static native int QProblem_hotstart__SWIG_0(long jarg1, QProblem jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, int[] jarg7, double[] jarg8);
  public final static native int QProblem_hotstart__SWIG_1(long jarg1, QProblem jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, int[] jarg7);
  public final static native int QProblem_hotstart__SWIG_2(long jarg1, QProblem jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, String jarg6, int[] jarg7, double[] jarg8);
  public final static native int QProblem_hotstart__SWIG_3(long jarg1, QProblem jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, String jarg6, int[] jarg7);
  public final static native int QProblem_hotstart__SWIG_4(long jarg1, QProblem jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, int[] jarg7, double[] jarg8, long jarg9, Bounds jarg9_, long jarg10, Constraints jarg10_);
  public final static native int QProblem_hotstart__SWIG_5(long jarg1, QProblem jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, String jarg6, int[] jarg7, double[] jarg8, long jarg9, Bounds jarg9_, long jarg10, Constraints jarg10_);
  public final static native int QProblem_solveCurrentEQP(long jarg1, QProblem jarg1_, int jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, double[] jarg9);
  public final static native int QProblem_getWorkingSet(long jarg1, QProblem jarg1_, double[] jarg2);
  public final static native int QProblem_getConstraints(long jarg1, QProblem jarg1_, long jarg2, Constraints jarg2_);
  public final static native int QProblem_getNC(long jarg1, QProblem jarg1_);
  public final static native int QProblem_getNEC(long jarg1, QProblem jarg1_);
  public final static native int QProblem_getNAC(long jarg1, QProblem jarg1_);
  public final static native int QProblem_getNIAC(long jarg1, QProblem jarg1_);
  public final static native int QProblem_getNZ(long jarg1, QProblem jarg1_);
  public final static native int QProblem_getDualSolution(long jarg1, QProblem jarg1_, double[] jarg2);
  public final static native int QProblem_setConstraintProduct(long jarg1, QProblem jarg1_, long jarg2, ConstraintProduct jarg2_);
  public final static native int QProblem_printProperties(long jarg1, QProblem jarg1_);
  public final static native int QProblem_writeQpDataIntoMatFile(long jarg1, QProblem jarg1_, String jarg2);
  public final static native int QProblem_writeQpWorkspaceIntoMatFile(long jarg1, QProblem jarg1_, String jarg2);
  public final static native long new_SQProblem__SWIG_0();
  public final static native long new_SQProblem__SWIG_1(int jarg1, int jarg2, int jarg3);
  public final static native long new_SQProblem__SWIG_2(int jarg1, int jarg2);
  public final static native long new_SQProblem__SWIG_3(long jarg1, SQProblem jarg1_);
  public final static native void delete_SQProblem(long jarg1);
  public final static native int SQProblem_hotstart__SWIG_0(long jarg1, SQProblem jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, int[] jarg9, double[] jarg10);
  public final static native int SQProblem_hotstart__SWIG_1(long jarg1, SQProblem jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, int[] jarg9);
  public final static native int SQProblem_hotstart__SWIG_2(long jarg1, SQProblem jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, String jarg6, String jarg7, String jarg8, int[] jarg9, double[] jarg10);
  public final static native int SQProblem_hotstart__SWIG_3(long jarg1, SQProblem jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, String jarg6, String jarg7, String jarg8, int[] jarg9);
  public final static native int SQProblem_hotstart__SWIG_4(long jarg1, SQProblem jarg1_, long jarg2, SymmetricMatrix jarg2_, double[] jarg3, long jarg4, Matrix jarg4_, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, int[] jarg9, double[] jarg10);
  public final static native int SQProblem_hotstart__SWIG_5(long jarg1, SQProblem jarg1_, long jarg2, SymmetricMatrix jarg2_, double[] jarg3, long jarg4, Matrix jarg4_, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, int[] jarg9);
  public final static native int SQProblem_hotstart__SWIG_6(long jarg1, SQProblem jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, int[] jarg7, double[] jarg8);
  public final static native int SQProblem_hotstart__SWIG_7(long jarg1, SQProblem jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, int[] jarg7);
  public final static native int SQProblem_hotstart__SWIG_8(long jarg1, SQProblem jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, String jarg6, int[] jarg7, double[] jarg8);
  public final static native int SQProblem_hotstart__SWIG_9(long jarg1, SQProblem jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, String jarg6, int[] jarg7);
  public final static native int SQProblem_hotstart__SWIG_10(long jarg1, SQProblem jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, int[] jarg7, double[] jarg8, long jarg9, Bounds jarg9_, long jarg10, Constraints jarg10_);
  public final static native int SQProblem_hotstart__SWIG_11(long jarg1, SQProblem jarg1_, String jarg2, String jarg3, String jarg4, String jarg5, String jarg6, int[] jarg7, double[] jarg8, long jarg9, Bounds jarg9_, long jarg10, Constraints jarg10_);
  public final static native int initAndSolve__SWIG_0(long jarg1, QProblem jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, double[] jarg6, double[] jarg7, double[] jarg8, int jarg9, double[] jarg10);
  public final static native int initAndSolve__SWIG_1(long jarg1, QProblem jarg1_, double[] jarg2, double[] jarg3, double[] jarg4, double[] jarg5, int jarg6, double[] jarg7);
  public final static native long SymmetricMatrix_SWIGUpcast(long jarg1);
  public final static native long DenseMatrix_SWIGUpcast(long jarg1);
  public final static native long SymDenseMat_SWIGUpcast(long jarg1);
  public final static native long SparseMatrix_SWIGUpcast(long jarg1);
  public final static native long SparseMatrixRow_SWIGUpcast(long jarg1);
  public final static native long SymSparseMat_SWIGUpcast(long jarg1);
  public final static native long Bounds_SWIGUpcast(long jarg1);
  public final static native long Constraints_SWIGUpcast(long jarg1);
  public final static native long QProblem_SWIGUpcast(long jarg1);
  public final static native long SQProblem_SWIGUpcast(long jarg1);
}
